#!/usr/bin/perl

use strict;
use warnings;
use Term::ANSIColor;

my $debug = 0;

my $CONFIG_FILENAME        = "/.multigit.conf";
my $ALL_PROJECT_PARAMS     = "allProjectParams";
my $BASE_DIR               = "baseDir";
my $COLOR_OUTPUT_ENABLED   = "colorOutputEnabled";
my $COLOR_ALERT            = "colorAlert";
my $COLOR_PROJECT          = "colorProject";
my $COLOR_PROJECT_GROUP    = "colorProjectGroup";
my $COLOR_SEPERATOR        = "colorSeperator";
my $COLOR_STDOUT           = "colorStdOut";
my $DEFAULT_PARAMETER      = "defaultParams";
my $GENERAL_PROBLEM        = "THERE HAS BEEN A PROBLEM!!!";
my $OK                     = "ok";
my $PROJECTS               = "projects";
my $PROJECT_MARKER         = "Projects [{]";
my $MULTICOMMAND_DELIMITER = "%%";
my $GIT_COMMAND            = "gitCommand";

my $configLocation = $ENV{"HOME"} . $CONFIG_FILENAME;
my %params = ($COLOR_ALERT => 'bold red');
my $error = 0;

if (!-r $configLocation) {
  &printErrorAndExit("Please set up a readable \"$configLocation\" file.");
}

&parseParams($configLocation);

my $colorOutput = $params{$COLOR_OUTPUT_ENABLED};
my $configStatus = &checkConfig();
unless ($configStatus eq $OK){
  &printErrorAndExit("Please correct your configuration in \"$configLocation\":\n>> " . $configStatus);
}

my $flags;

if (@ARGV > 0 && $ARGV[0] =~/^[+-]/) {
  ($flags, @ARGV) = @ARGV;
  my $excludeProjects = $flags =~ /^\+/;
  $flags = substr($flags, 1);
  if ($excludeProjects) {
    my $sortedDefaults = join('', sort {$a cmp $b} split(//, $params{$DEFAULT_PARAMETER}));
    my $preparedFlags = join('.*', sort {$a cmp $b} split(//, $flags));
    if ($sortedDefaults !~ /$preparedFlags/) {
        &printParameterErrorAndExit();
    }
    $sortedDefaults =~ s/[$flags]//g;
    $flags = $sortedDefaults;
  }
  unless (&allCharsInString($flags, $params{$ALL_PROJECT_PARAMS})) {
        &printParameterErrorAndExit();
  }
} else {
  $flags = $params{$DEFAULT_PARAMETER};
}

if (@ARGV == 0 ) { &printUsage; exit(0); }

my $gitArgs = join(' ', &prepareArgs(@ARGV));

if ($gitArgs =~ m/$MULTICOMMAND_DELIMITER/) {
  $debug && print "Multiple commands found!\n";
  my @commandList = split(/\s+$MULTICOMMAND_DELIMITER\s+/, $gitArgs);
  for (my $i = 0; $i < @commandList; $i++) {
    &doGitActions($flags, $commandList[$i]);
    if ($error) {
      &printErrorAndExit("Stopping, because of an error");
    }
  }
} else {
  &doGitActions($flags, $gitArgs);
}

###############################
## Only Subroutines below... ##
###############################

sub doGitActions {
  my ($flags, $args) = @_;
  my @extGroups = @{$params{$PROJECTS}}; my $groupStop = @extGroups - 1; my $projectCount = 0;
  for (my $i = 0; $i < $groupStop; $i += 2) {
    my @ex = @{$extGroups[$i + 1]};
    my $groupParameters = substr($params{$ALL_PROJECT_PARAMS}, $projectCount, @ex);
    if (&someCharsInString($groupParameters, $flags)) {
      &printHeader($extGroups[$i]);
    }
    $projectCount += @ex;
    for (my $j = 0; $j < @ex; $j++) {
      my ($parameter, $project) = split(/\s*=\s*/, $ex[$j]);
      if (&allCharsInString($parameter, $flags)) {
        &doOneGitAction($project, $parameter, $args);
      }
    }
  }
}

sub doOneGitAction {
  my ($project, $parameter, $args) = @_;
  my $text = "($parameter) $project:";
  my $restOfLine = " git $args";
  my $underline = $text . $restOfLine;
  $underline =~ s/./=/g;
  $colorOutput && print color $params{$COLOR_PROJECT};
  print "\n$text";
  $colorOutput && print color $params{$COLOR_SEPERATOR};
  print "$restOfLine\n";
  print "$underline\n";
  my $targetDir = $params{$BASE_DIR}. "/" . $project;
  if (! -d "$targetDir")      { &printWarning("Directory \"$targetDir\" does not exist."); return; }
  if (! -d "$targetDir/.git") { &printWarning("Directory \"$targetDir\" does not contain a git project."); return; }
  $colorOutput && print color $params{$COLOR_STDOUT};
  chdir($targetDir);
  open my $handle, "$params{$GIT_COMMAND} $args |" or die "Oops... something went wrong...";
  while (<$handle>) {
    print $_;
  }
  close $handle;
  if ($? != 0) {
    &printWarning($GENERAL_PROBLEM);
    $error = 1;
  }
  $colorOutput && print color 'reset';
}

sub prepareArgs {
  my @args = @_;
  for (my $i = 0; $i < @args; $i++) {
    if ($args[$i] =~ m/\s/) {
      $args[$i] = '"' . $args[$i] . '"';
    }
  }
  return @args;
}

sub parseParams {
  my ($configLocation) = shift;
  open(CONFIG_FILE,"< $configLocation") or &printError("Couldn't open file $configLocation");
  my $inProjects = 0;
  my $inProjectGroup = 0;
  my ($key, $value);
  my @projectGroups;
  while(<CONFIG_FILE>) {
    if ( m/^(#|\s*$)/ ) { next; }
    chomp;
    if ( !$inProjects ) {
      if ( m/^\s*$PROJECT_MARKER\s*$/) {
        $debug && print "Starting Projectsblock with >>" . $_ . "<<\n";
        $inProjects = 1;
        next;
      } else {
        $debug && print "getting a simple field from >>". $_ . "<<\n";
        ($key, $value) = split(/\s*=\s*/, &trim($_));
        $params{$key} = $value;
      }
    } elsif (!$inProjectGroup) {
      if (m /{/) {
        $debug && print "Starting ProjectsGroup with >>" . $_ . "<<\n";
        push(@projectGroups, &parseProjectGroupName($_));
        $inProjectGroup = 1;
      } else {
        $debug && print "Finished Projectsblock with >>" . $_ . "<<\n";
        $inProjects = 0;
      }
    } else {
      if (m /}/) {
        $debug && print "Finished ProjectsGroup with >>" . $_ . "<<\n";
        $inProjectGroup = 0;
      } else {
        $debug && print "getting an project field from >>" . $_ . "<<\n";
        my $lastEntry = $projectGroups[@projectGroups - 1];
        if (ref($lastEntry) eq 'ARRAY') {
          push(@$lastEntry, &trim($_));
        } else {
          push(@projectGroups, [&trim($_)]);
        }
        $debug && print "Array: " . &printArray(\@projectGroups, 0) . ", Value: ". &trim($_). "\n";
      }
    }
  }
  $params{$PROJECTS} = \@projectGroups;
}

sub checkConfig {
  unless (defined ($params{$BASE_DIR})) { return "\"$BASE_DIR\" is missing"; }
  unless (defined ($params{$DEFAULT_PARAMETER})) { return "\"$DEFAULT_PARAMETER\" is missing"; }
  unless (defined ($params{$GIT_COMMAND})) { return "\"$GIT_COMMAND\" is missing"; }
  unless (defined ($params{$COLOR_PROJECT_GROUP})) { return "\"$COLOR_PROJECT_GROUP\" is missing"; }
  unless (defined ($params{$COLOR_PROJECT})) { return "\"$COLOR_PROJECT\" is missing"; }
  unless (defined ($params{$COLOR_SEPERATOR})) { return "\"$COLOR_SEPERATOR\" is missing"; }
  unless (defined ($params{$COLOR_STDOUT})) { return "\"$COLOR_STDOUT\" is missing"; }
  unless (defined ($params{$PROJECTS})) { return "There are no git projects configured."; }
  $params{$ALL_PROJECT_PARAMS} = &allProjectParams();
  my $paramsCheck = &checkConfiguredParams();
  unless ($paramsCheck eq $OK) { return $paramsCheck; }
  return $OK;
}

sub checkConfiguredParams {
  my $defaultParams = $params{$DEFAULT_PARAMETER};
  my $params = $params{$ALL_PROJECT_PARAMS};
  my $sortedUniqDefaults = &uniquifyChars($defaultParams);
  my $sortedUniqParams = &uniquifyChars($params);
  if (length($sortedUniqParams) < length($params)) {
    return "Please see to your project parameters being unique.";
  }
  unless (&allCharsInString($sortedUniqDefaults, $sortedUniqParams)) {
    return "Your \"defaultParams\" reference unconfigured projects.";
  }
  return $OK;
}

sub allProjectParams {
  my @extGroups = @{$params{$PROJECTS}};
  my $keys = "";
  my $groupStop = @extGroups - 1;
  for (my $i = 0; $i < $groupStop; $i += 2) {
    $debug && print $extGroups[$i] ."...\n";
    my @ex = @{$extGroups[$i + 1]};
    $debug && print "There are " . (@ex + 0) . " entries in this group:\n";
    for (my $j = 0; $j < @ex; $j++) {
      $debug && print $ex[$j] . "...\n";
      $keys .= substr($ex[$j],0,1);
    }
  }
  return $keys;
}

sub allProjectHelpTexts {
  my @extGroups = @{$params{$PROJECTS}};
  my $texts = "";
  my $groupStop = @extGroups - 1;
  for (my $i = 0; $i < $groupStop; $i += 2) {
    $debug && print $extGroups[$i] ."...\n";
    my @ex = @{$extGroups[$i + 1]};
    $texts .= "\n" . $extGroups[$i] . "\n";
    $debug && print "There are " . (@ex + 0) . " entries in this group:\n";
    for (my $j = 0; $j < @ex; $j++) {
      $debug && print $ex[$j] . "...\n";
      my ($p, $project) = split(/\s*=\s*/, $ex[$j]);
      $texts .= "-$p includes the project $project\n";
    }
  }
  return $texts;
}

sub uniquifyChars {
  my $text = shift;
  my %seen = ();
  my $result = "";
  foreach my $c (split //, $text)  { $seen{$c}++; }
  foreach my $c (sort(keys %seen)) { $result .= $c; }
  return $result;
}

sub allCharsInString {
  my ($source, $target) = @_;
  foreach my $c (split //, $source) {
    unless ($target =~ m/$c/ ) {
      return 0;
    }
  }
  return 1;
}

sub someCharsInString {
  my ($source, $target) = @_;
  foreach my $c (split //, $source) {
    if ($target =~ m/$c/ ) {
      return 1;
    }
  }
  return 0;
}

sub trim {
  my $text = shift;
  chomp $text;
  $text =~ s/(^\s+|\s+$)//g;
  return $text;
}

sub parseProjectGroupName {
  my $tmp = shift;
  chomp $tmp;
  $tmp = &trim($tmp);
  $tmp =~ s/\s*{$//;
  return $tmp;
}

sub printArray {
  my ($aRef, $indent) = @_;
  my @array = @$aRef;
  print ' ' x $indent . "|[ARRAY]\n";
  for (my $i = 0; $i < @array; $i++) {
    if (defined $array[$i]) {
      if (ref($array[$i]) eq 'ARRAY') {
        &printArray($array[$i], $indent + 2);
      } else {
        print ' ' x ($indent + 1) . $array[$i] . "\n";
      }
    } else {
      print "undefined\n";
    }
  }
  print ' ' x $indent . "|-\n";
}

sub printHeader {
  my $text = shift;
  $text .= ":";
  my $underline = $text;
  $underline =~ s/./=/g;
  $colorOutput && print color $params{$COLOR_PROJECT_GROUP};
  print "\n$text\n$underline";
  $colorOutput && print color 'reset';
}

sub printWarning {
  my $text = shift;
  $colorOutput && print color $params{$COLOR_ALERT};
  print "\n$text\n\n";
  $colorOutput && print color 'reset';
}

sub printErrorAndExit {
  my $text = shift;
  &printWarning($text . "\n");
  exit(0);
}

sub printParameterErrorAndExit {
  &printErrorAndExit("Only project parameters ".&showParameterList($params{$ALL_PROJECT_PARAMS})." are configured...\n"
                    .">> See \"multigit\" without parameters for more info.");
}

sub showParameterList {
  my $params = shift;
  my $result = "";
  foreach my $c (split //, $params) {
    $result .= "$c, ";
  }
  $result =~ s/, (.), $/ and $1/;
  return $result;
}

sub printUsage {
  print "\n";
  print "USAGE: multigit [<-/+>".$params{$ALL_PROJECT_PARAMS}."] <git-command> [git-command parameters...] [$MULTICOMMAND_DELIMITER <git-command> [git-command parameters...]]+\n";
  print "\n";
  print &allProjectHelpTexts();
  print "\n";
  print "For when you do not select specific projects, your default is set to projects ".&showParameterList($params{$DEFAULT_PARAMETER})."\n";
  print "\n";
  print "If you specify projects with '+', your default projects excluding those mentioned will be used\n";
  print "\n";
  print "You can sequence multiple git-commands using '$MULTICOMMAND_DELIMITER' to execute them one after the other\n";
  print "  e.g. 'multigit checkout master $MULTICOMMAND_DELIMITER pull $MULTICOMMAND_DELIMITER status\n";
  print "\n";
  print "CAVEATS:\n";
  print " - Git aliases can be used, as the parameters are delegated to git as they are.\n";
  print "\n";
  print " - If you do not include a git command, flags for git are captured by multigit\n";
  print "\n";
}
